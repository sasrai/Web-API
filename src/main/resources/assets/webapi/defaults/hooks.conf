# Web hooks are used to send certain events on minecraft to other endpoints.
# This can be used for example to log chat or react to certain commands.

# The following are event hooks which are all called when the specified event happens. They get passed various data
# in the body (if method != GET, described below for each event). The format of the hook definitions is the same as
# in the command hooks which are described below, EXCEPT: event hooks do not support parameters (also not 'source').
# Please note that the endpoints don't get called in any particular order, and might even be called concurrently.
events {
    # This event is fired for all other events. The "X-WebAPI-Event" header specifies the exact event.
    # Data: See below, depends on hook
    all=[
        {
            address="http://127.0.0.1:25000"
            method=POST
            enabled=false
        }
    ]

    # This event is fired when a player earns an achievement
    # Data: { player: <player>, achievement: <achievement> }
    achievement=[]

    # This event is fired when a chat message is sent on the server
    # Data: <message>
    chat=[]

    # This event is fired when a player joins the server
    # Data: <player>
    player_join=[]

    # This event is fired when a player leaves the server
    # Data: <player>
    player_leave=[]

    # This event is fired when a player dies
    # Data: { killer: <player|entity>, target: <player> }
    player_death=[]

    # This event is fired when a command is executed
    # Data: <command>
    command=[]
}

# The endpoints in this list get called when a chat message is sent.
# They get passed the chat message in the body (if method != GET)(same format as messages from /history/chat endpoint).
# Please note that the endpoints don't get called in any particular order, and might even be called concurrently.
command=[
    {
        # This is the name of the endpoint, which is used to call it via the webapi command.
        name=weather2

        # The aliases this command can be called with.
        # THESE ARE NOT PREFIXED WITH "/webapi notify", BE CAREFUL NOT TO OVERRIDE OTHER COMMANDS!
        aliases=[
            weather
        ]

        # This is the address of the endpoint. It may contain parameters that are replaced when being called.
        # Parameters have to be placed in curly braces, { and }, and will be a simple string (uuid of object
        # where applicable). See the params sections further down.
        address="http://127.0.0.1:25000/{world}"

        # This is the http method that is used (GET, PUT, POST or DELETE)
        method=POST

        # Choose to either send the data as application/json or application/x-www-form-urlencoded.
        dataType=JSON

        # Set to true or omit to enable the endpoint.
        enabled=false

        # This is a list of additional headers that is sent to the server. You can use this to e.g. specify a secret
        # key which ensures that the server knows the requests are coming from the Web-API. You may also use variables
        # here (same format as in "address"). Please note the headers "X-WebAPI-Event", "User-Agent", "Content-Type",
        # "Content-Length", "accepts" and "charset" will always be overridden by the WebAPI.
        headers=[
            {
                name=X-WEBAPI-KEY
                value=MY-SUPER-SECRET-KEY
            },
            {
                name=X-SOURCE-HEADER
                value="{source}"
            }
        ]

        # Here you have to specify what parameters are used in the address, headers and body.
        # Parameters in the address and headers have to be used explicitly, the body automatically contains all the
        # parameters that are listed here. The parameters are expected to show up in this order when calling the
        # command. There is a special parameter 'source' which is always included and contains the identifier of the
        # one who ran the command (e.g. UUID of the player).
        params=[
            {
                name=player
                type=player
            },
            {
                name=world
                type=world
            }
        ]
    }
]
